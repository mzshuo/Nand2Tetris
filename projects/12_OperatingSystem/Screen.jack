// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static int currColor;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let currColor = 1;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int addr;
        let addr = screen;
        while (addr < screen + 8192) {
            let screen[addr] = 0;
            let addr = addr + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if (b) {
            let currColor = 1;
        }
        else {
            let currColor = 0;
        }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, mod16;
        let address = y * 32 + (x / 16);
        let mod16 = x - (x / 16 * 16);
        if (currColor = 1) {
            let value = screen[address] | Math.getTwoToThe(mod16);
        }
        else {
            let value = screen[address] & ~Math.getTwoToThe(mod16);
        }
        let screen[address] = value;
        return; 
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff;
        let dx = x2 - x1;
        let dy = y1 - y2;
        let a = 0;
        let b = 0;
        let diff = 0;       // diff = a * dy - (b * dx)

        if (~(dx < 0) & ~(dy < 0)) {    // north-east direction
            while (~(a>dx) & ~(b>dy)) {
                do Screen.drawPixel(x1 + a, y1 - b);
                if (~(diff > 0) & (dx > 0)) {
                    let a = a + 1;
                    let diff = diff + dy;
                }
                else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return;
        }
        if (~(dx > 0) & ~(dy > 0)) {
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }
        if (~(dx < 0) & ~(dy > 0)) {      // south-east direction
            let dy = -dy;
            while (~(a>dx) & ~(b>dy)) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (~(diff > 0) & (dx > 0)) {
                    let a = a + 1;
                    let diff = diff + dy;
                }
                else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return;
        }
        if (~(dx > 0) & ~(dy < 0)) {      
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int line;
        let line = y1;
        while (~(line > y2)) {
            do Screen.drawLine(x1, line, x2, line);
            let line = line + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx;
        let dy = -r;
        while (dy < (r + 1)) {
            let dx = Math.sqrt(r*r - (dy*dy));
            do Screen.drawLine(x-dx, y+dy, x+dx, y+dy);
            let dy = dy + 1;
        }
        return;
    }
}
