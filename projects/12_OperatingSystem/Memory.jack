// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static int heapBase;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heapBase = 2048;
        let freeList = heapBase;
        let freeList[0] = null;
        let freeList[1] = 16384 - 2048;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block, formerBlock;
        let block = freeList;
        let formerBlock = null;

        while (block[1] + 2 < size) {
            let formerBlock = block;
            let block = block[0];
        }

        if (formerBlock = 0) {
            let freeList = freeList + 2 + size;
            let freeList[0] = block[0];
            let freeList[1] = block[1] - size - 2;
        }
        else {
            let formerBlock[0] = block + 2 + size;
            let block[2+size] = block[0];
            let block[2+size+1] = block[1] - size - 2;
        }

        return block + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        /* Appends the object o to the front of freeList. */
        var Array deAlloced;
        let deAlloced = o - 2;
        let deAlloced[0] = freeList;
        let freeList = deAlloced;
        return;
    }    
}
