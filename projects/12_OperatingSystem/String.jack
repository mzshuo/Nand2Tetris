// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    static int zero, minus;
    field Array str;
    field int end;
    field int maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let zero = 48;
        let minus = 45;

        let maxLen = maxLength;
        let end = 0;
        if (maxLen > 0) {
            let str = Array.new(maxLen);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxLen > 0) {
            do str.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return end;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (end < maxLen) {
            do setCharAt(end, c);
            let end = end + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (end > 0) {
            let end = end - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var String positive;
        var int i;
        if (str[0] = minus) {
            let positive = String.new(end);
            let i = 1;
            while (i < end) {
                do positive.appendChar(str[i]);
                let i = i + 1;
            }
            return -String.string2Int(positive);
        }
        return String.string2Int(this);
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var String strValue;
        var int length;
        var char c;

        let strValue = String.int2String(val);
        let length = strValue.length();

        let end = 0;
        while (end < length) {
            let c = strValue.charAt(end);
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    /** Returns a string representation of a non-negative integer, such as 123->'123' */
    function String int2String(int value) {
        var int lastDigit, i;
        var char c;
        var String preStr, postStr;

        if (value < 0) {
            let preStr = String.new(10);
            do preStr.appendChar(minus);

            let postStr = String.int2String(-value);
            let i = 0;
            while (i < postStr.length()) {
                let c = postStr.charAt(i);
                do preStr.appendChar(c);
                let i = i + 1;
            }
            return preStr;
        }

        let lastDigit = value - (value / 10 * 10);
        if (value < 10) {
            let preStr = String.new(10);
            do preStr.appendChar(zero + lastDigit);
            return preStr;
        }
        else { 
            let preStr = String.int2String(value / 10);
            return preStr.appendChar(zero + lastDigit); 
        }
    }

    /** Returns the integer value of a string of digit characters,
     *  assuming that str[0] represents the most significant digit. */
    function int string2Int(String strValue) {
        var int length, i, d;
        var int value;

        let length = strValue.length();
        let value = 0;
        let i = 0;

        while (i < length) {
            let d = strValue.charAt(i) - zero;
            if ((d < 0) | (d > 9)) { let i = length; }  // break
            let value = value * 10 + d;
            let i = i + 1;
        }

        return value;
    }
}